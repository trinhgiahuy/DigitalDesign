<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html><head>
<title></title>
<link rel="Stylesheet" title="hdl2html stylesheet" media="Screen" href="../../scripts/hdl2html.css">
<!-- Generated by HDL Designer -->
<!--    at 12:48:54 on 22.11.2019 -->
<script language='javascript'>
function pagesBtn() {
   return '';
}
function panelmenu() {
   return '';
}
</script>
</head>
<body>
<pre>
<span class=C>-- VHDL Entity Computer_Exercise_3_lib.C3_T2_Top_Level.symbol</span>
<span class=C>--</span>
<span class=C>-- Created:</span>
<span class=C>--          by - mfhubu.UNKNOWN (HTC219-706-SPC)</span>
<span class=C>--          at - 12:21:32 22.11.2019</span>
<span class=C>--</span>
<span class=C>-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)</span>
<span class=C>--</span>
<span class=K>LIBRARY</span> ieee;
<span class=K>USE</span> ieee.std_logic_1164.<span class=K>all</span>;
<span class=K>USE</span> ieee.std_logic_arith.<span class=K>all</span>;

<span class=K>ENTITY</span> C3_T2_Top_Level <span class=K>IS</span>
   <span class=K>PORT</span>(
      btn            : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (3 <span class=K>DOWNTO</span> 0);
      clk            : <span class=A>IN</span>     <span class=T>std_logic</span>;
      rst_n          : <span class=A>IN</span>     <span class=T>std_logic</span>;
      sw0            : <span class=A>IN</span>     <span class=T>std_logic</span>;
      if_you_name    : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
      iotre_will     : <span class=A>OUT</span>    <span class=T>std_logic</span>;
      like_this      : <span class=A>OUT</span>    <span class=T>std_logic</span>;
      of_this_course : <span class=A>OUT</span>    <span class=T>std_logic</span>;
      throw_you_out  : <span class=A>OUT</span>    <span class=T>std_logic</span>;
      your_signals   : <span class=A>OUT</span>    <span class=T>std_logic</span>
   );

<span class=C>-- Declarations</span>

<span class=K>END</span> C3_T2_Top_Level ;

<span class=C>--</span>
<span class=C>-- VHDL Architecture Computer_Exercise_3_lib.C3_T2_Top_Level.struct</span>
<span class=C>--</span>
<span class=C>-- Created:</span>
<span class=C>--          by - mfhubu.UNKNOWN (HTC219-706-SPC)</span>
<span class=C>--          at - 12:21:32 22.11.2019</span>
<span class=C>--</span>
<span class=C>-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)</span>
<span class=C>--</span>
<span class=K>LIBRARY</span> ieee;
<span class=K>USE</span> ieee.std_logic_1164.<span class=K>all</span>;
<span class=K>USE</span> ieee.std_logic_arith.<span class=K>all</span>;

<span class=K>LIBRARY</span> Computer_Exerccise_2_lib;
<span class=K>LIBRARY</span> Computer_Exercise_3_lib;
<span class=K>LIBRARY</span> Computer_Exercise_4_hdl_lib;
<span class=K>LIBRARY</span> PRE_MADE;

<span class=K>ARCHITECTURE</span> struct <span class=K>OF</span> C3_T2_Top_Level <span class=K>IS</span>

   <span class=C>-- Architecture declarations</span>

   <span class=C>-- Internal signal declarations</span>
   <span class=K>SIGNAL</span> alien_col     : <span class=T>std_logic_vector</span>(23 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> bullet_color  : <span class=T>std_logic_vector</span>(23 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> din1          : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> din2          : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> din3          : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> din4          : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> din5          : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> dout          : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> dout1         : <span class=T>std_logic_vector</span>(23 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> enable        : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> enable_slow   : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> frame_done    : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> gun_color     : <span class=T>std_logic_vector</span>(23 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> gun_px_ix     : <span class=T>std_logic_vector</span>(1 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> hit           : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> module_select : <span class=T>std_logic_vector</span>(1 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> speed         : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> victory       : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> victory_color : <span class=T>std_logic_vector</span>(23 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> victory_done  : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> w_rdy         : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> write         : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> x_coord       : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> x_coord1      : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> x_internal    : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> y_coord1      : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> y_coord2      : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);


   <span class=C>-- Component Declarations</span>
   <span class=K>COMPONENT</span> C2_T7_Basic_Alien
   <span class=K>PORT</span> (
      clk         : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      enable      : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      enable_slow : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      hit         : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      rst_n       : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      speed       : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      alien_col   : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (23 <span class=K>DOWNTO</span> 0);
      x_coord     : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
      y_coord     : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0)
   );
   <span class=K>END</span> <span class=K>COMPONENT</span>;
   <span class=K>COMPONENT</span> C3_T1_Gun_Module
   <span class=K>PORT</span> (
      btn        : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (3 <span class=K>DOWNTO</span> 0);
      clk        : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      enable     : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      gun_px_idx : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (1 <span class=K>DOWNTO</span> 0);
      rst_n      : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      gun_color  : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (23 <span class=K>DOWNTO</span> 0);
      x_coord    : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
      x_internal : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
      y_coord    : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0)
   );
   <span class=K>END</span> <span class=K>COMPONENT</span>;
   <span class=K>COMPONENT</span> C3_T2_Write_Sequencer
   <span class=K>PORT</span> (
      clk           : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      rst           : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      victory       : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      victory_done  : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      write_ready   : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      enable        : <span class=A>OUT</span>    <span class=T>std_logic</span> ;
      enable_slow   : <span class=A>OUT</span>    <span class=T>std_logic</span> ;
      frame_done    : <span class=A>OUT</span>    <span class=T>std_logic</span> ;
      gun_px_ix     : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (1 <span class=K>DOWNTO</span> 0);
      module_select : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (1 <span class=K>DOWNTO</span> 0);
      write         : <span class=A>OUT</span>    <span class=T>std_logic</span>
   );
   <span class=K>END</span> <span class=K>COMPONENT</span>;
   <span class=K>COMPONENT</span> C3_T4_Bullet
   <span class=K>PORT</span> (
      btn            : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (3 <span class=K>DOWNTO</span> 0);
      clk            : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      enable         : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      gun_x_coord    : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
      rst_n          : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      bullet_color   : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (23 <span class=K>DOWNTO</span> 0);
      bullet_x_coord : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
      bullet_y_coord : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0)
   );
   <span class=K>END</span> <span class=K>COMPONENT</span>;
   <span class=K>COMPONENT</span> C4_T1_Hit_Detector
   <span class=K>PORT</span> (
      alien_x  : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
      alien_y  : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
      bullet_x : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
      bullet_y : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
      clk      : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      rst_n    : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      hit      : <span class=A>OUT</span>    <span class=T>std_logic</span>
   );
   <span class=K>END</span> <span class=K>COMPONENT</span>;
   <span class=K>COMPONENT</span> C4_T2_Victory_Effect
   <span class=K>PORT</span> (
      clk          : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      rst          : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      color        : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (23 <span class=K>DOWNTO</span> 0);
      victory_done : <span class=A>OUT</span>    <span class=T>std_logic</span> ;
      x            : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
      y            : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0)
   );
   <span class=K>END</span> <span class=K>COMPONENT</span>;
   <span class=K>COMPONENT</span> Hit_Counter
   <span class=K>PORT</span> (
      clk          : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      hit_detected : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      rst          : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      sw0          : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      speed        : <span class=A>OUT</span>    <span class=T>std_logic</span> ;
      victory      : <span class=A>OUT</span>    <span class=T>std_logic</span>
   );
   <span class=K>END</span> <span class=K>COMPONENT</span>;
   <span class=K>COMPONENT</span> z_black_box_y
   <span class=K>PORT</span> (
      clk            : <span class=A>IN</span>     <span class=T>std_logic</span>;
      color_BGR      : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (23 <span class=K>DOWNTO</span> 0);
      frame_done     : <span class=A>IN</span>     <span class=T>std_logic</span>;
      rst_n          : <span class=A>IN</span>     <span class=T>std_logic</span>;
      write          : <span class=A>IN</span>     <span class=T>std_logic</span>;
      x_coord        : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
      y_coord        : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
      if_you_name    : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
      iotre_will     : <span class=A>OUT</span>    <span class=T>std_logic</span>;
      like_this      : <span class=A>OUT</span>    <span class=T>std_logic</span>;
      of_this_course : <span class=A>OUT</span>    <span class=T>std_logic</span>;
      throw_you_out  : <span class=A>OUT</span>    <span class=T>std_logic</span>;
      w_rdy          : <span class=A>OUT</span>    <span class=T>std_logic</span>;
      your_signals   : <span class=A>OUT</span>    <span class=T>std_logic</span>
   );
   <span class=K>END</span> <span class=K>COMPONENT</span>;

   <span class=C>-- Optional embedded configurations</span>
   <span class=C>-- pragma synthesis_off</span>
   <span class=K>FOR</span> <span class=K>ALL</span> : C2_T7_Basic_Alien <span class=K>USE</span> <span class=K>ENTITY</span> Computer_Exerccise_2_lib.C2_T7_Basic_Alien;
   <span class=K>FOR</span> <span class=K>ALL</span> : C3_T1_Gun_Module <span class=K>USE</span> <span class=K>ENTITY</span> Computer_Exercise_3_lib.C3_T1_Gun_Module;
   <span class=K>FOR</span> <span class=K>ALL</span> : C3_T2_Write_Sequencer <span class=K>USE</span> <span class=K>ENTITY</span> Computer_Exercise_3_lib.C3_T2_Write_Sequencer;
   <span class=K>FOR</span> <span class=K>ALL</span> : C3_T4_Bullet <span class=K>USE</span> <span class=K>ENTITY</span> Computer_Exercise_3_lib.C3_T4_Bullet;
   <span class=K>FOR</span> <span class=K>ALL</span> : C4_T1_Hit_Detector <span class=K>USE</span> <span class=K>ENTITY</span> Computer_Exercise_4_hdl_lib.C4_T1_Hit_Detector;
   <span class=K>FOR</span> <span class=K>ALL</span> : C4_T2_Victory_Effect <span class=K>USE</span> <span class=K>ENTITY</span> Computer_Exercise_4_hdl_lib.C4_T2_Victory_Effect;
   <span class=K>FOR</span> <span class=K>ALL</span> : Hit_Counter <span class=K>USE</span> <span class=K>ENTITY</span> Computer_Exercise_4_hdl_lib.Hit_Counter;
   <span class=K>FOR</span> <span class=K>ALL</span> : z_black_box_y <span class=K>USE</span> <span class=K>ENTITY</span> PRE_MADE.z_black_box_y;
   <span class=C>-- pragma synthesis_on</span>


<span class=K>BEGIN</span>

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_2' of 'mux'</span>
   u_2combo_proc: <span class=K>PROCESS</span>(x_coord, x_coord1, din2, din4, module_select)
   <span class=K>BEGIN</span>
      <span class=K>CASE</span> module_select <span class=K>IS</span>
      <span class=K>WHEN</span> <span class=S>"00"</span> => dout <= x_coord;
      <span class=K>WHEN</span> <span class=S>"01"</span> => dout <= x_coord1;
      <span class=K>WHEN</span> <span class=S>"10"</span> => dout <= din2;
      <span class=K>WHEN</span> <span class=S>"11"</span> => dout <= din4;
      <span class=K>WHEN</span> <span class=K>OTHERS</span> => dout <= (<span class=K>OTHERS</span> => 'X');
      <span class=K>END</span> <span class=K>CASE</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> u_2combo_proc;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_4' of 'mux'</span>
   u_4combo_proc: <span class=K>PROCESS</span>(y_coord2, din1, din3, din5, module_select)
   <span class=K>BEGIN</span>
      <span class=K>CASE</span> module_select <span class=K>IS</span>
      <span class=K>WHEN</span> <span class=S>"00"</span> => y_coord1 <= y_coord2;
      <span class=K>WHEN</span> <span class=S>"01"</span> => y_coord1 <= din1;
      <span class=K>WHEN</span> <span class=S>"10"</span> => y_coord1 <= din3;
      <span class=K>WHEN</span> <span class=S>"11"</span> => y_coord1 <= din5;
      <span class=K>WHEN</span> <span class=K>OTHERS</span> => y_coord1 <= (<span class=K>OTHERS</span> => 'X');
      <span class=K>END</span> <span class=K>CASE</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> u_4combo_proc;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_5' of 'mux'</span>
   u_5combo_proc: <span class=K>PROCESS</span>(alien_col, gun_color, bullet_color,
                          victory_color, module_select)
   <span class=K>BEGIN</span>
      <span class=K>CASE</span> module_select <span class=K>IS</span>
      <span class=K>WHEN</span> <span class=S>"00"</span> => dout1 <= alien_col;
      <span class=K>WHEN</span> <span class=S>"01"</span> => dout1 <= gun_color;
      <span class=K>WHEN</span> <span class=S>"10"</span> => dout1 <= bullet_color;
      <span class=K>WHEN</span> <span class=S>"11"</span> => dout1 <= victory_color;
      <span class=K>WHEN</span> <span class=K>OTHERS</span> => dout1 <= (<span class=K>OTHERS</span> => 'X');
      <span class=K>END</span> <span class=K>CASE</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> u_5combo_proc;

   <span class=C>-- Instance port mappings.</span>
   U_6 : C2_T7_Basic_Alien
      <span class=K>PORT</span> <span class=K>MAP</span> (
         clk         => clk,
         enable      => enable,
         enable_slow => enable_slow,
         hit         => btn(2),
         rst_n       => rst_n,
         speed       => speed,
         alien_col   => alien_col,
         x_coord     => x_coord,
         y_coord     => y_coord2
      );
   U_3 : C3_T1_Gun_Module
      <span class=K>PORT</span> <span class=K>MAP</span> (
         btn        => btn,
         clk        => clk,
         enable     => enable,
         gun_px_idx => gun_px_ix,
         rst_n      => rst_n,
         gun_color  => gun_color,
         x_coord    => x_coord1,
         x_internal => x_internal,
         y_coord    => din1
      );
   U_1 : C3_T2_Write_Sequencer
      <span class=K>PORT</span> <span class=K>MAP</span> (
         clk           => clk,
         rst           => rst_n,
         victory       => victory,
         victory_done  => victory_done,
         write_ready   => w_rdy,
         enable        => enable,
         enable_slow   => enable_slow,
         frame_done    => frame_done,
         gun_px_ix     => gun_px_ix,
         module_select => module_select,
         write         => write
      );
   U_7 : C3_T4_Bullet
      <span class=K>PORT</span> <span class=K>MAP</span> (
         btn            => btn,
         clk            => clk,
         enable         => enable,
         gun_x_coord    => x_internal,
         rst_n          => rst_n,
         bullet_color   => bullet_color,
         bullet_x_coord => din2,
         bullet_y_coord => din3
      );
   U_8 : C4_T1_Hit_Detector
      <span class=K>PORT</span> <span class=K>MAP</span> (
         alien_x  => x_coord,
         alien_y  => y_coord2,
         bullet_x => din2,
         bullet_y => din3,
         clk      => clk,
         rst_n    => rst_n,
         hit      => hit
      );
   U_10 : C4_T2_Victory_Effect
      <span class=K>PORT</span> <span class=K>MAP</span> (
         clk          => clk,
         rst          => rst_n,
         color        => victory_color,
         victory_done => victory_done,
         x            => din4,
         y            => din5
      );
   U_9 : Hit_Counter
      <span class=K>PORT</span> <span class=K>MAP</span> (
         clk          => clk,
         hit_detected => hit,
         rst          => rst_n,
         sw0          => sw0,
         speed        => speed,
         victory      => victory
      );
   U_0 : z_black_box_y
      <span class=K>PORT</span> <span class=K>MAP</span> (
         clk            => clk,
         color_BGR      => dout1,
         frame_done     => frame_done,
         rst_n          => rst_n,
         write          => write,
         x_coord        => dout,
         y_coord        => y_coord1,
         if_you_name    => if_you_name,
         iotre_will     => iotre_will,
         like_this      => like_this,
         of_this_course => of_this_course,
         throw_you_out  => throw_you_out,
         w_rdy          => w_rdy,
         your_signals   => your_signals
      );

<span class=K>END</span> struct;</pre>
<SCRIPT SRC="../../scripts/is.js"></SCRIPT><SCRIPT SRC="../../scripts/imageFrame.js"></SCRIPT>
</body>
