<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html><head>
<title></title>
<link rel="Stylesheet" title="hdl2html stylesheet" media="Screen" href="../../scripts/hdl2html.css">
<!-- Generated by HDL Designer -->
<!--    at 12:48:55 on 22.11.2019 -->
<script language='javascript'>
function pagesBtn() {
   return '';
}
function panelmenu() {
   return '';
}
</script>
</head>
<body>
<pre>
<span class=C>-- VHDL Entity Computer_Exercise_3_lib.C3_T2_Write_Sequencer.symbol</span>
<span class=C>--</span>
<span class=C>-- Created:</span>
<span class=C>--          by - mfhubu.UNKNOWN (HTC219-706-SPC)</span>
<span class=C>--          at - 12:20:30 22.11.2019</span>
<span class=C>--</span>
<span class=C>-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)</span>
<span class=C>--</span>
<span class=K>LIBRARY</span> ieee;
<span class=K>USE</span> ieee.std_logic_1164.<span class=K>all</span>;
<span class=K>USE</span> ieee.std_logic_arith.<span class=K>all</span>;

<span class=K>ENTITY</span> C3_T2_Write_Sequencer <span class=K>IS</span>
   <span class=K>PORT</span>(
      clk           : <span class=A>IN</span>     <span class=T>std_logic</span>;
      rst           : <span class=A>IN</span>     <span class=T>std_logic</span>;
      victory       : <span class=A>IN</span>     <span class=T>std_logic</span>;
      victory_done  : <span class=A>IN</span>     <span class=T>std_logic</span>;
      write_ready   : <span class=A>IN</span>     <span class=T>std_logic</span>;
      enable        : <span class=A>OUT</span>    <span class=T>std_logic</span>;
      enable_slow   : <span class=A>OUT</span>    <span class=T>std_logic</span>;
      frame_done    : <span class=A>OUT</span>    <span class=T>std_logic</span>;
      gun_px_ix     : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (1 <span class=K>DOWNTO</span> 0);
      module_select : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (1 <span class=K>DOWNTO</span> 0);
      write         : <span class=A>OUT</span>    <span class=T>std_logic</span>
   );

<span class=C>-- Declarations</span>

<span class=K>END</span> C3_T2_Write_Sequencer ;

<span class=C>--</span>
<span class=C>-- VHDL Architecture Computer_Exercise_3_lib.C3_T2_Write_Sequencer.fsm</span>
<span class=C>--</span>
<span class=C>-- Created:</span>
<span class=C>--          by - mfhubu.UNKNOWN (HTC219-706-SPC)</span>
<span class=C>--          at - 12:20:30 22.11.2019</span>
<span class=C>--</span>
<span class=C>-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)</span>
<span class=C>--</span>
<span class=K>LIBRARY</span> ieee;
<span class=K>USE</span> ieee.std_logic_1164.<span class=K>all</span>;
<span class=K>USE</span> ieee.std_logic_arith.<span class=K>all</span>;

<span class=K>ARCHITECTURE</span> fsm <span class=K>OF</span> C3_T2_Write_Sequencer <span class=K>IS</span>

   <span class=C>-- Architecture Declarations</span>
   <span class=K>SIGNAL</span> counter : <span class=T>integer</span> := 0;

   <span class=K>TYPE</span> STATE_TYPE <span class=K>IS</span> (
      s0,
      s2,
      s3,
      s4,
      s5,
      s6,
      s7,
      s10,
      s11,
      s8,
      s9,
      s13,
      s12,
      s14
   );

   <span class=C>-- Declare current and next state signals</span>
   <span class=K>SIGNAL</span> current_state : STATE_TYPE;
   <span class=K>SIGNAL</span> next_state : STATE_TYPE;
   <span class=C>-- pragma synthesis_off</span>
   <span class=K>SIGNAL</span> hds_next,hds_current,hds_clock: <span class=T>INTEGER</span>;
   <span class=C>-- pragma synthesis_on</span>

   <span class=C>-- Declare Wait State internal signals</span>
   <span class=K>SIGNAL</span> csm_timer : <span class=T>std_logic_vector</span>(23 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> csm_next_timer : <span class=T>std_logic_vector</span>(23 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> csm_timeout : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> csm_to_s13 : <span class=T>std_logic</span>;

<span class=K>BEGIN</span>

   <span class=C>-----------------------------------------------------------------</span>
   clocked_proc : <span class=K>PROCESS</span> (
      clk,
      rst
   )
   <span class=C>-----------------------------------------------------------------</span>
   <span class=K>BEGIN</span>
      <span class=K>IF</span> (rst = '0') <span class=K>THEN</span>
         current_state <= s0;
         csm_timer <= (<span class=K>OTHERS</span> => '0');
         <span class=C>-- pragma synthesis_off</span>
         hds_current <= 0;
         <span class=C>-- pragma synthesis_on</span>
      <span class=K>ELSIF</span> (clk'<span class=A>EVENT</span> <span class=K>AND</span> clk = '1') <span class=K>THEN</span>
         current_state <= next_state;
         csm_timer <= csm_next_timer;
         <span class=C>-- pragma synthesis_off</span>
         hds_current <= hds_next;
         hds_clock <= -1;
         hds_clock <= 0;
         <span class=C>-- pragma synthesis_on</span>

         <span class=C>-- Combined Actions</span>
         <span class=K>CASE</span> current_state <span class=K>IS</span>
            <span class=K>WHEN</span> s10 =>
               <span class=K>IF</span> (counter /= 1) <span class=K>THEN</span>
                  counter <= 1 ;
               <span class=K>ELSIF</span> (counter =1) <span class=K>THEN</span>
                  counter <= 0;
               <span class=K>END</span> <span class=K>IF</span>;
            <span class=K>WHEN</span> <span class=K>OTHERS</span> =>
               <span class=K>NULL</span>;
         <span class=K>END</span> <span class=K>CASE</span>;
      <span class=K>END</span> <span class=K>IF</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> clocked_proc;

   <span class=C>-----------------------------------------------------------------</span>
   nextstate_proc : <span class=K>PROCESS</span> (
      counter,
      csm_timeout,
      current_state,
      victory,
      victory_done,
      write_ready
   )
   <span class=C>-----------------------------------------------------------------</span>
   <span class=K>BEGIN</span>
      <span class=C>-- Default assignments to Wait State entry flags</span>
      csm_to_s13 <= '0';
      <span class=K>CASE</span> current_state <span class=K>IS</span>
         <span class=K>WHEN</span> s0 =>
            <span class=K>IF</span> (write_ready = '1' <span class=K>AND</span> victory = '1') <span class=K>THEN</span>
               next_state <= s14;
               <span class=C>-- pragma synthesis_off</span>
               hds_next <= 1;
               <span class=C>-- pragma synthesis_on</span>
            <span class=K>ELSIF</span> (write_ready = '1' <span class=K>AND</span> victory /= '1') <span class=K>THEN</span>
               next_state <= s2;
               <span class=C>-- pragma synthesis_off</span>
               hds_next <= 2;
               <span class=C>-- pragma synthesis_on</span>
            <span class=K>ELSE</span>
               next_state <= s0;
               <span class=C>-- pragma synthesis_off</span>
               hds_next <= 0;
               <span class=C>-- pragma synthesis_on</span>
            <span class=K>END</span> <span class=K>IF</span>;
         <span class=K>WHEN</span> s2 =>
            next_state <= s3;
            <span class=C>-- pragma synthesis_off</span>
            hds_next <= 3;
            <span class=C>-- pragma synthesis_on</span>
         <span class=K>WHEN</span> s3 =>
            next_state <= s4;
            <span class=C>-- pragma synthesis_off</span>
            hds_next <= 4;
            <span class=C>-- pragma synthesis_on</span>
         <span class=K>WHEN</span> s4 =>
            next_state <= s5;
            <span class=C>-- pragma synthesis_off</span>
            hds_next <= 5;
            <span class=C>-- pragma synthesis_on</span>
         <span class=K>WHEN</span> s5 =>
            next_state <= s6;
            <span class=C>-- pragma synthesis_off</span>
            hds_next <= 6;
            <span class=C>-- pragma synthesis_on</span>
         <span class=K>WHEN</span> s6 =>
            next_state <= s7;
            <span class=C>-- pragma synthesis_off</span>
            hds_next <= 7;
            <span class=C>-- pragma synthesis_on</span>
         <span class=K>WHEN</span> s7 =>
            next_state <= s8;
            <span class=C>-- pragma synthesis_off</span>
            hds_next <= 8;
            <span class=C>-- pragma synthesis_on</span>
         <span class=K>WHEN</span> s10 =>
            <span class=K>IF</span> (counter /= 1) <span class=K>THEN</span>
               next_state <= s11;
               <span class=C>-- pragma synthesis_off</span>
               hds_next <= 9;
               <span class=C>-- pragma synthesis_on</span>
            <span class=K>ELSIF</span> (counter =1) <span class=K>THEN</span>
               next_state <= s12;
               <span class=C>-- pragma synthesis_off</span>
               hds_next <= 10;
               <span class=C>-- pragma synthesis_on</span>
            <span class=K>ELSE</span>
               next_state <= s10;
               <span class=C>-- pragma synthesis_off</span>
               hds_next <= 0;
               <span class=C>-- pragma synthesis_on</span>
            <span class=K>END</span> <span class=K>IF</span>;
         <span class=K>WHEN</span> s11 =>
            next_state <= s13;
            csm_to_s13 <= '1';
            <span class=C>-- pragma synthesis_off</span>
            hds_next <= 11;
            <span class=C>-- pragma synthesis_on</span>
         <span class=K>WHEN</span> s8 =>
            next_state <= s9;
            <span class=C>-- pragma synthesis_off</span>
            hds_next <= 12;
            <span class=C>-- pragma synthesis_on</span>
         <span class=K>WHEN</span> s9 =>
            next_state <= s10;
            <span class=C>-- pragma synthesis_off</span>
            hds_next <= 13;
            <span class=C>-- pragma synthesis_on</span>
         <span class=K>WHEN</span> s13 =>
            <span class=K>IF</span> (csm_timeout = '1') <span class=K>THEN</span>
               next_state <= s0;
               <span class=C>-- pragma synthesis_off</span>
               hds_next <= 14;
               <span class=C>-- pragma synthesis_on</span>
            <span class=K>ELSE</span>
               next_state <= s13;
               <span class=C>-- pragma synthesis_off</span>
               hds_next <= 0;
               <span class=C>-- pragma synthesis_on</span>
            <span class=K>END</span> <span class=K>IF</span>;
         <span class=K>WHEN</span> s12 =>
            next_state <= s13;
            csm_to_s13 <= '1';
            <span class=C>-- pragma synthesis_off</span>
            hds_next <= 15;
            <span class=C>-- pragma synthesis_on</span>
         <span class=K>WHEN</span> s14 =>
            <span class=K>IF</span> (victory_done = '1') <span class=K>THEN</span>
               next_state <= s10;
               <span class=C>-- pragma synthesis_off</span>
               hds_next <= 16;
               <span class=C>-- pragma synthesis_on</span>
            <span class=K>ELSE</span>
               next_state <= s14;
               <span class=C>-- pragma synthesis_off</span>
               hds_next <= 0;
               <span class=C>-- pragma synthesis_on</span>
            <span class=K>END</span> <span class=K>IF</span>;
         <span class=K>WHEN</span> <span class=K>OTHERS</span> =>
            next_state <= s0;
            <span class=C>-- pragma synthesis_off</span>
            hds_next <= 0;
            <span class=C>-- pragma synthesis_on</span>
      <span class=K>END</span> <span class=K>CASE</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> nextstate_proc;

   <span class=C>-----------------------------------------------------------------</span>
   output_proc : <span class=K>PROCESS</span> (
      current_state
   )
   <span class=C>-----------------------------------------------------------------</span>
   <span class=K>BEGIN</span>
      <span class=C>-- Default Assignment</span>
      enable <= '0';
      enable_slow <= '0';
      frame_done <= '0';
      gun_px_ix <= <span class=S>"00"</span>;
      module_select <= <span class=S>"00"</span>;
      write <= '0';

      <span class=C>-- Combined Actions</span>
      <span class=K>CASE</span> current_state <span class=K>IS</span>
         <span class=K>WHEN</span> s2 =>
            write <= '1';
         <span class=K>WHEN</span> s3 =>
            write <= '1';
            module_select <= <span class=S>"01"</span>;
         <span class=K>WHEN</span> s4 =>
            module_select <= <span class=S>"01"</span>;
            write <= '1' ;
         <span class=K>WHEN</span> s5 =>
            module_select <= <span class=S>"01"</span>;
            write <= '1' ;
            gun_px_ix <= <span class=S>"01"</span>;
         <span class=K>WHEN</span> s6 =>
            module_select <= <span class=S>"01"</span>;
            write <= '1' ;
            gun_px_ix <= <span class=S>"10"</span>;
         <span class=K>WHEN</span> s7 =>
            module_select <= <span class=S>"01"</span>;
            write <= '1' ;
            gun_px_ix <= <span class=S>"11"</span>;
         <span class=K>WHEN</span> s10 =>
            frame_done <= '1' ;
         <span class=K>WHEN</span> s11 =>
            enable <= '1';
         <span class=K>WHEN</span> s8 =>
            module_select <= <span class=S>"01"</span>;
            write <= '1' ;
            gun_px_ix <= <span class=S>"11"</span>;
         <span class=K>WHEN</span> s9 =>
            write <= '1' ;
            module_select <= <span class=S>"10"</span> ;
         <span class=K>WHEN</span> s12 =>
            enable <= '1' ;
            enable_slow <= '1' ;
         <span class=K>WHEN</span> s14 =>
            write <= '1';
            module_select <= <span class=S>"11"</span> ;
         <span class=K>WHEN</span> <span class=K>OTHERS</span> =>
            <span class=K>NULL</span>;
      <span class=K>END</span> <span class=K>CASE</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> output_proc;

   <span class=C>-----------------------------------------------------------------</span>
   csm_wait_combo_proc: <span class=K>PROCESS</span> (
      csm_timer,
      csm_to_s13
   )
   <span class=C>-----------------------------------------------------------------</span>
   <span class=K>VARIABLE</span> csm_temp_timeout : <span class=T>std_logic</span>;
   <span class=K>BEGIN</span>
      <span class=K>IF</span> (unsigned(csm_timer) = 0) <span class=K>THEN</span>
         csm_temp_timeout := '1';
      <span class=K>ELSE</span>
         csm_temp_timeout := '0';
      <span class=K>END</span> <span class=K>IF</span>;

      <span class=K>IF</span> (csm_to_s13 = '1') <span class=K>THEN</span>
         csm_next_timer <= <span class=S>"101101110001101011111111"</span>; <span class=C>-- no cycles(12000000)-1=11999999</span>
      <span class=K>ELSE</span>
         <span class=K>IF</span> (csm_temp_timeout = '1') <span class=K>THEN</span>
            csm_next_timer <= (<span class=K>OTHERS</span>=>'0');
         <span class=K>ELSE</span>
            csm_next_timer <= unsigned(csm_timer) - '1';
         <span class=K>END</span> <span class=K>IF</span>;
      <span class=K>END</span> <span class=K>IF</span>;
      csm_timeout <= csm_temp_timeout;
   <span class=K>END</span> <span class=K>PROCESS</span> csm_wait_combo_proc;

<span class=K>END</span> fsm;</pre>
<SCRIPT SRC="../../scripts/is.js"></SCRIPT><SCRIPT SRC="../../scripts/imageFrame.js"></SCRIPT>
</body>
