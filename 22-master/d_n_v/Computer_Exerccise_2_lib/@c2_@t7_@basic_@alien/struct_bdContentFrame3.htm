<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html><head>
<title></title>
<link rel="Stylesheet" title="hdl2html stylesheet" media="Screen" href="../../scripts/hdl2html.css">
<!-- Generated by HDL Designer -->
<!--    at 12:50:21 on 22.11.2019 -->
<script language='javascript'>
function pagesBtn() {
   return '';
}
function panelmenu() {
   return '';
}
</script>
</head>
<body>
<A NAME="entity" HREF="#architecture">Go to Architecture</A><pre>
<span class=C>--</span>
<span class=C>-- VHDL Entity Computer_Exerccise_2_lib.C2_T7_Basic_Alien.arch_name</span>
<span class=C>--</span>
<span class=C>-- Created:</span>
<span class=C>--          by - mfhubu.UNKNOWN (HTC219-711-SPC)</span>
<span class=C>--          at - 11:22:06 11.10.2019</span>
<span class=C>--</span>
<span class=C>-- using Mentor Graphics HDL Designer(TM) 2019.3 (Build 4)</span>
<span class=C>--</span>
<span class=K>LIBRARY</span> ieee;
<span class=K>USE</span> ieee.std_logic_1164.<span class=K>all</span>;
<span class=K>USE</span> ieee.std_logic_arith.<span class=K>all</span>;

<span class=K>ENTITY</span> C2_T7_Basic_Alien <span class=K>IS</span>
   <span class=K>PORT</span>(
      clk         : <span class=A>IN</span>     <span class=T>std_logic</span>;
      enable      : <span class=A>IN</span>     <span class=T>std_logic</span>;
      enable_slow : <span class=A>IN</span>     <span class=T>std_logic</span>;
      hit         : <span class=A>IN</span>     <span class=T>std_logic</span>;
      rst_n       : <span class=A>IN</span>     <span class=T>std_logic</span>;
      speed       : <span class=A>IN</span>     <span class=T>std_logic</span>;
      alien_col   : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (23 <span class=K>DOWNTO</span> 0);
      x_coord     : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
      y_coord     : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0)
   );

<span class=C>-- Declarations</span>

<span class=K>END</span> C2_T7_Basic_Alien ;
</pre>
<A NAME="architecture" HREF="#entity">Go to Entity</A><pre>
<span class=C>--</span>
<span class=C>-- VHDL Entity Computer_Exerccise_2_lib.C2_T7_Basic_Alien.arch_name</span>
<span class=C>--</span>
<span class=C>-- Created:</span>
<span class=C>--          by - mfhubu.UNKNOWN (HTC219-711-SPC)</span>
<span class=C>--          at - 11:22:06 11.10.2019</span>
<span class=C>--</span>
<span class=C>-- using Mentor Graphics HDL Designer(TM) 2019.3 (Build 4)</span>
<span class=C>--</span>
<span class=K>LIBRARY</span> ieee;
<span class=K>USE</span> ieee.std_logic_1164.<span class=K>all</span>;
<span class=K>USE</span> ieee.std_logic_arith.<span class=K>all</span>;

<span class=K>ENTITY</span> C2_T7_Basic_Alien <span class=K>IS</span>
   <span class=K>PORT</span>(
      clk         : <span class=A>IN</span>     <span class=T>std_logic</span>;
      enable      : <span class=A>IN</span>     <span class=T>std_logic</span>;
      enable_slow : <span class=A>IN</span>     <span class=T>std_logic</span>;
      hit         : <span class=A>IN</span>     <span class=T>std_logic</span>;
      rst_n       : <span class=A>IN</span>     <span class=T>std_logic</span>;
      speed       : <span class=A>IN</span>     <span class=T>std_logic</span>;
      alien_col   : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (23 <span class=K>DOWNTO</span> 0);
      x_coord     : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
      y_coord     : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0)
   );

<span class=C>-- Declarations</span>

<span class=K>END</span> C2_T7_Basic_Alien ;


<span class=C>--</span>
<span class=C>-- VHDL Architecture Computer_Exerccise_2_lib.C2_T7_Basic_Alien.struct</span>
<span class=C>--</span>
<span class=C>-- Created:</span>
<span class=C>--          by - mfhubu.UNKNOWN (HTC219-708-SPC)</span>
<span class=C>--          at - 11:43:43 19.11.2019</span>
<span class=C>--</span>
<span class=C>-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)</span>
<span class=C>--</span>
<span class=K>LIBRARY</span> ieee;
<span class=K>USE</span> ieee.std_logic_1164.<span class=K>all</span>;
<span class=K>USE</span> ieee.std_logic_arith.<span class=K>all</span>;

<span class=K>LIBRARY</span> Computer_Exerccise_2_lib;

<span class=K>ARCHITECTURE</span> struct <span class=K>OF</span> C2_T7_Basic_Alien <span class=K>IS</span>

   <span class=C>-- Architecture declarations</span>

   <span class=C>-- Internal signal declarations</span>
   <span class=K>SIGNAL</span> data_out : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> din2     : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> dout3    : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> dout6    : <span class=T>std_logic_vector</span>(1 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> enable1  : <span class=T>std_logic</span>;

   <span class=C>-- Implicit buffer signal declarations</span>
   <span class=K>SIGNAL</span> x_coord_internal : <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);


   <span class=C>-- ModuleWare signal declarations(v1.12) for instance 'U_1' of 'adff'</span>
   <span class=K>SIGNAL</span> mw_U_1reg_cval : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);

   <span class=C>-- Component Declarations</span>
   <span class=K>COMPONENT</span> Basic_Alien_Direction
   <span class=K>PORT</span> (
      clk       : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      enable    : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      rst_n     : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      x_0       : <span class=A>IN</span>     <span class=T>std_logic</span> ;                   <span class=C>-- Condition TO switch direction</span>
      x_7       : <span class=A>IN</span>     <span class=T>std_logic</span> ;                   <span class=C>-- Condition TO switch direction</span>
      direction : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (1 <span class=K>DOWNTO</span> 0) <span class=C>-- 2 MSB allow TO shift - 2 LSB decide direction</span>
   );
   <span class=K>END</span> <span class=K>COMPONENT</span>;
   <span class=K>COMPONENT</span> Basic_Alien_color
   <span class=K>PORT</span> (
      clk       : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      hit       : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      rst_n     : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      alien_col : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (23 <span class=K>DOWNTO</span> 0)
   );
   <span class=K>END</span> <span class=K>COMPONENT</span>;
   <span class=K>COMPONENT</span> Basic_Alien_y_coord
   <span class=K>PORT</span> (
      clk     : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      rst_n   : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      y_coord : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0)
   );
   <span class=K>END</span> <span class=K>COMPONENT</span>;
   <span class=K>COMPONENT</span> C2_T3_Leftshifter
   <span class=K>PORT</span> (
      data_in  : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
      data_out : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0)
   );
   <span class=K>END</span> <span class=K>COMPONENT</span>;
   <span class=K>COMPONENT</span> C2_T4_Rightshifter
   <span class=K>PORT</span> (
      x : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
      y : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0)
   );
   <span class=K>END</span> <span class=K>COMPONENT</span>;

   <span class=C>-- Optional embedded configurations</span>
   <span class=C>-- pragma synthesis_off</span>
   <span class=K>FOR</span> <span class=K>ALL</span> : Basic_Alien_Direction <span class=K>USE</span> <span class=K>ENTITY</span> Computer_Exerccise_2_lib.Basic_Alien_Direction;
   <span class=K>FOR</span> <span class=K>ALL</span> : Basic_Alien_color <span class=K>USE</span> <span class=K>ENTITY</span> Computer_Exerccise_2_lib.Basic_Alien_color;
   <span class=K>FOR</span> <span class=K>ALL</span> : Basic_Alien_y_coord <span class=K>USE</span> <span class=K>ENTITY</span> Computer_Exerccise_2_lib.Basic_Alien_y_coord;
   <span class=K>FOR</span> <span class=K>ALL</span> : C2_T3_Leftshifter <span class=K>USE</span> <span class=K>ENTITY</span> Computer_Exerccise_2_lib.C2_T3_Leftshifter;
   <span class=K>FOR</span> <span class=K>ALL</span> : C2_T4_Rightshifter <span class=K>USE</span> <span class=K>ENTITY</span> Computer_Exerccise_2_lib.C2_T4_Rightshifter;
   <span class=C>-- pragma synthesis_on</span>


<span class=K>BEGIN</span>

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_1' of 'adff'</span>
   x_coord_internal <= mw_U_1reg_cval;
   u_1seq_proc: <span class=K>PROCESS</span> (clk, rst_n)
   <span class=K>BEGIN</span>
      <span class=K>IF</span> (rst_n = '0') <span class=K>THEN</span>
         mw_U_1reg_cval <= <span class=S>"00100000"</span>;
      <span class=K>ELSIF</span> (clk'<span class=A>EVENT</span> <span class=K>AND</span> clk='1') <span class=K>THEN</span>
         mw_U_1reg_cval <= dout3;
      <span class=K>END</span> <span class=K>IF</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> u_1seq_proc;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_3' of 'mux'</span>
   u_3combo_proc: <span class=K>PROCESS</span>(enable_slow, enable, speed)
   <span class=K>BEGIN</span>
      <span class=K>CASE</span> speed <span class=K>IS</span>
      <span class=K>WHEN</span> '0' => enable1 <= enable_slow;
      <span class=K>WHEN</span> '1' => enable1 <= enable;
      <span class=K>WHEN</span> <span class=K>OTHERS</span> => enable1 <= 'X';
      <span class=K>END</span> <span class=K>CASE</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> u_3combo_proc;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_16' of 'mux'</span>
   u_16combo_proc: <span class=K>PROCESS</span>(x_coord_internal, data_out, din2, dout6)
   <span class=K>BEGIN</span>
      <span class=K>CASE</span> dout6 <span class=K>IS</span>
      <span class=K>WHEN</span> <span class=S>"00"</span> => dout3 <= x_coord_internal;
      <span class=K>WHEN</span> <span class=S>"01"</span> => dout3 <= data_out;
      <span class=K>WHEN</span> <span class=S>"10"</span> => dout3 <= din2;
      <span class=K>WHEN</span> <span class=S>"11"</span> => dout3 <= x_coord_internal;
      <span class=K>WHEN</span> <span class=K>OTHERS</span> => dout3 <= (<span class=K>OTHERS</span> => 'X');
      <span class=K>END</span> <span class=K>CASE</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> u_16combo_proc;

   <span class=C>-- Instance port mappings.</span>
   U_2 : Basic_Alien_Direction
      <span class=K>PORT</span> <span class=K>MAP</span> (
         clk       => clk,
         enable    => enable1,
         rst_n     => rst_n,
         x_0       => x_coord_internal(0),
         x_7       => x_coord_internal(7),
         direction => dout6
      );
   U_0 : Basic_Alien_color
      <span class=K>PORT</span> <span class=K>MAP</span> (
         clk       => clk,
         hit       => hit,
         rst_n     => rst_n,
         alien_col => alien_col
      );
   U_4 : Basic_Alien_y_coord
      <span class=K>PORT</span> <span class=K>MAP</span> (
         clk     => clk,
         rst_n   => rst_n,
         y_coord => y_coord
      );
   U_8 : C2_T3_Leftshifter
      <span class=K>PORT</span> <span class=K>MAP</span> (
         data_in  => x_coord_internal,
         data_out => data_out
      );
   U_7 : C2_T4_Rightshifter
      <span class=K>PORT</span> <span class=K>MAP</span> (
         x => x_coord_internal,
         y => din2
      );

   <span class=C>-- Implicit buffered output assignments</span>
   x_coord <= x_coord_internal;

<span class=K>END</span> struct;</pre>
<SCRIPT SRC="../../scripts/is.js"></SCRIPT><SCRIPT SRC="../../scripts/imageFrame.js"></SCRIPT>
</body>
