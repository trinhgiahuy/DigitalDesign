<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html><head>
<title></title>
<link rel="Stylesheet" title="hdl2html stylesheet" media="Screen" href="../../scripts/hdl2html.css">
<!-- Generated by HDL Designer -->
<!--    at 11:40:45 on  5.12.2019 -->
<script language='javascript'>
function pagesBtn() {
   return '';
}
function panelmenu() {
   return '';
}
</script>
</head>
<body>
<pre>
<span class=C>-- VHDL Entity Computer_Exercise_5_lib.C5_T1_Shield_Gama.symbol</span>
<span class=C>--</span>
<span class=C>-- Created:</span>
<span class=C>--          by - qkrasi.UNKNOWN (HTC219-712-SPC)</span>
<span class=C>--          at - 11:12:20  5.12.2019</span>
<span class=C>--</span>
<span class=C>-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)</span>
<span class=C>--</span>
<span class=K>LIBRARY</span> ieee;
<span class=K>USE</span> ieee.std_logic_1164.<span class=K>all</span>;
<span class=K>USE</span> ieee.std_logic_arith.<span class=K>all</span>;

<span class=K>ENTITY</span> C5_T1_Shield_Gama <span class=K>IS</span>
   <span class=K>PORT</span>(
      clk      : <span class=A>IN</span>     <span class=T>std_logic</span>;
      rst      : <span class=A>IN</span>     <span class=T>std_logic</span>;
      rx_rdy   : <span class=A>IN</span>     <span class=T>std_logic</span>;
      bit_out  : <span class=A>OUT</span>    <span class=T>std_logic</span>;
      lat      : <span class=A>OUT</span>    <span class=T>std_logic</span>;
      sb       : <span class=A>OUT</span>    <span class=T>std_logic</span>;
      transmit : <span class=A>OUT</span>    <span class=T>std_logic</span>
   );

<span class=C>-- Declarations</span>

<span class=K>END</span> C5_T1_Shield_Gama ;

<span class=C>--</span>
<span class=C>-- VHDL Architecture Computer_Exercise_5_lib.C5_T1_Shield_Gama.fsm</span>
<span class=C>--</span>
<span class=C>-- Created:</span>
<span class=C>--          by - qkrasi.UNKNOWN (HTC219-712-SPC)</span>
<span class=C>--          at - 11:16:24  5.12.2019</span>
<span class=C>--</span>
<span class=C>-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)</span>
<span class=C>--</span>
<span class=K>LIBRARY</span> ieee;
<span class=K>USE</span> ieee.std_logic_1164.<span class=K>all</span>;
<span class=K>USE</span> ieee.std_logic_arith.<span class=K>all</span>;

<span class=K>ARCHITECTURE</span> fsm <span class=K>OF</span> C5_T1_Shield_Gama <span class=K>IS</span>

   <span class=C>-- Architecture Declarations</span>
   <span class=K>SIGNAL</span> bit_index : <span class=T>integer</span> <span class=K>RANGE</span> 6 <span class=K>DOWNTO</span> 0 := 0;
   <span class=K>SIGNAL</span> blue : <span class=T>std_logic_vector</span>(5 <span class=K>DOWNTO</span> 0) := <span class=S>"110111"</span>;
   <span class=K>SIGNAL</span> color : <span class=T>std_logic_vector</span>(5 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> color_select : <span class=T>integer</span> <span class=K>RANGE</span> 3 <span class=K>DOWNTO</span> 0 := 0;
   <span class=K>SIGNAL</span> counter : <span class=T>integer</span> <span class=K>RANGE</span> 8 <span class=K>DOWNTO</span> 0 := 0;
   <span class=K>SIGNAL</span> green : <span class=T>std_logic_vector</span>(5 <span class=K>DOWNTO</span> 0) := <span class=S>"111111"</span>;
   <span class=K>SIGNAL</span> red : <span class=T>std_logic_vector</span>(5 <span class=K>DOWNTO</span> 0) := <span class=S>"011100"</span>;

   <span class=K>TYPE</span> STATE_TYPE <span class=K>IS</span> (
      s0,
      s1,
      s2,
      s3,
      s4,
      s5,
      s6,
      s7,
      s8,
      s9,
      s10,
      s11,
      s12
   );

   <span class=C>-- Declare current and next state signals</span>
   <span class=K>SIGNAL</span> current_state : STATE_TYPE;
   <span class=K>SIGNAL</span> next_state : STATE_TYPE;

   <span class=C>-- Declare Wait State internal signals</span>
   <span class=K>SIGNAL</span> csm_timer : <span class=T>std_logic_vector</span>(1 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> csm_next_timer : <span class=T>std_logic_vector</span>(1 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> csm_timeout : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> csm_to_s12 : <span class=T>std_logic</span>;

<span class=K>BEGIN</span>

   <span class=C>-----------------------------------------------------------------</span>
   clocked_proc : <span class=K>PROCESS</span> (
      clk,
      rst
   )
   <span class=C>-----------------------------------------------------------------</span>
   <span class=K>BEGIN</span>
      <span class=K>IF</span> (rst = '0') <span class=K>THEN</span>
         current_state <= s0;
         csm_timer <= (<span class=K>OTHERS</span> => '0');
      <span class=K>ELSIF</span> (clk'<span class=A>EVENT</span> <span class=K>AND</span> clk = '1') <span class=K>THEN</span>
         current_state <= next_state;
         csm_timer <= csm_next_timer;

         <span class=C>-- Combined Actions</span>
         <span class=K>CASE</span> current_state <span class=K>IS</span>
            <span class=K>WHEN</span> s1 =>
               color <= red;
            <span class=K>WHEN</span> s2 =>
               color <= green;
            <span class=K>WHEN</span> s3 =>
               color <= blue;
            <span class=K>WHEN</span> s5 =>
               bit_index <= bit_index+1;
            <span class=K>WHEN</span> s9 =>
               bit_index <=0;
               color_select <= color_select+1;
            <span class=K>WHEN</span> s10 =>
               counter <= counter +1;
               color_select <= 0;
            <span class=K>WHEN</span> <span class=K>OTHERS</span> =>
               <span class=K>NULL</span>;
         <span class=K>END</span> <span class=K>CASE</span>;
      <span class=K>END</span> <span class=K>IF</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> clocked_proc;

   <span class=C>-----------------------------------------------------------------</span>
   nextstate_proc : <span class=K>PROCESS</span> (
      bit_index,
      color_select,
      counter,
      current_state,
      rx_rdy
   )
   <span class=C>-----------------------------------------------------------------</span>
   <span class=K>BEGIN</span>
      <span class=C>-- Default assignments to Wait State entry flags</span>
      csm_to_s12 <= '0';
      <span class=K>CASE</span> current_state <span class=K>IS</span>
         <span class=K>WHEN</span> s0 =>
            <span class=K>IF</span> (color_select = 2) <span class=K>THEN</span>
               next_state <= s1;
            <span class=K>ELSIF</span> (color_select = 1) <span class=K>THEN</span>
               next_state <= s2;
            <span class=K>ELSIF</span> (color_select = 0) <span class=K>THEN</span>
               next_state <= s3;
            <span class=K>ELSE</span>
               next_state <= s0;
            <span class=K>END</span> <span class=K>IF</span>;
         <span class=K>WHEN</span> s1 =>
            next_state <= s4;
         <span class=K>WHEN</span> s2 =>
            next_state <= s4;
         <span class=K>WHEN</span> s3 =>
            next_state <= s4;
         <span class=K>WHEN</span> s4 =>
            <span class=K>IF</span> (rx_rdy = '1') <span class=K>THEN</span>
               next_state <= s5;
            <span class=K>ELSE</span>
               next_state <= s4;
            <span class=K>END</span> <span class=K>IF</span>;
         <span class=K>WHEN</span> s5 =>
            next_state <= s7;
         <span class=K>WHEN</span> s6 =>
            <span class=K>IF</span> (bit_index /= 6 <span class=K>AND</span> counter /= 8) <span class=K>THEN</span>
               next_state <= s0;
            <span class=K>ELSIF</span> (bit_index = 6 <span class=K>AND</span> counter /= 8) <span class=K>THEN</span>
               next_state <= s9;
            <span class=K>ELSIF</span> (counter=8) <span class=K>THEN</span>
               next_state <= s11;
            <span class=K>ELSE</span>
               next_state <= s6;
            <span class=K>END</span> <span class=K>IF</span>;
         <span class=K>WHEN</span> s7 =>
            next_state <= s6;
         <span class=K>WHEN</span> s8 =>
            next_state <= s12;
            csm_to_s12 <= '1';
         <span class=K>WHEN</span> s9 =>
            <span class=K>IF</span> (color_select /= 2) <span class=K>THEN</span>
               next_state <= s0;
            <span class=K>ELSIF</span> (color_select <= 2) <span class=K>THEN</span>
               next_state <= s10;
            <span class=K>ELSE</span>
               next_state <= s9;
            <span class=K>END</span> <span class=K>IF</span>;
         <span class=K>WHEN</span> s10 =>
            <span class=K>IF</span> (counter /= 7) <span class=K>THEN</span>
               next_state <= s0;
            <span class=K>ELSIF</span> (counter = 7) <span class=K>THEN</span>
               next_state <= s11;
            <span class=K>ELSE</span>
               next_state <= s10;
            <span class=K>END</span> <span class=K>IF</span>;
         <span class=K>WHEN</span> s11 =>
            next_state <= s8;
         <span class=K>WHEN</span> s12 =>
            next_state <= s12;
         <span class=K>WHEN</span> <span class=K>OTHERS</span> =>
            next_state <= s0;
      <span class=K>END</span> <span class=K>CASE</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> nextstate_proc;

   <span class=C>-----------------------------------------------------------------</span>
   output_proc : <span class=K>PROCESS</span> (
      bit_index,
      color,
      current_state
   )
   <span class=C>-----------------------------------------------------------------</span>
   <span class=K>BEGIN</span>

      <span class=C>-- Combined Actions</span>
      <span class=K>CASE</span> current_state <span class=K>IS</span>
         <span class=K>WHEN</span> s0 =>
            sb <= '0';
            transmit <= '0';
            lat <= '1';
         <span class=K>WHEN</span> s4 =>
            bit_out <= color (bit_index);
         <span class=K>WHEN</span> s6 =>
            transmit <= '0';
         <span class=K>WHEN</span> s7 =>
            transmit <= '1';
         <span class=K>WHEN</span> s8 =>
            sb <= '0';
            lat <= '1';
         <span class=K>WHEN</span> s11 =>
            lat <= '0';
            bit_out <= '0';
         <span class=K>WHEN</span> s12 =>
            sb <= '1';
         <span class=K>WHEN</span> <span class=K>OTHERS</span> =>
            <span class=K>NULL</span>;
      <span class=K>END</span> <span class=K>CASE</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> output_proc;

   <span class=C>-----------------------------------------------------------------</span>
   csm_wait_combo_proc: <span class=K>PROCESS</span> (
      csm_timer,
      csm_to_s12
   )
   <span class=C>-----------------------------------------------------------------</span>
   <span class=K>VARIABLE</span> csm_temp_timeout : <span class=T>std_logic</span>;
   <span class=K>BEGIN</span>
      <span class=K>IF</span> (unsigned(csm_timer) = 0) <span class=K>THEN</span>
         csm_temp_timeout := '1';
      <span class=K>ELSE</span>
         csm_temp_timeout := '0';
      <span class=K>END</span> <span class=K>IF</span>;

      <span class=K>IF</span> (csm_to_s12 = '1') <span class=K>THEN</span>
         csm_next_timer <= <span class=S>"01"</span>; <span class=C>-- no cycles(2)-1=1</span>
      <span class=K>ELSE</span>
         <span class=K>IF</span> (csm_temp_timeout = '1') <span class=K>THEN</span>
            csm_next_timer <= (<span class=K>OTHERS</span>=>'0');
         <span class=K>ELSE</span>
            csm_next_timer <= unsigned(csm_timer) - '1';
         <span class=K>END</span> <span class=K>IF</span>;
      <span class=K>END</span> <span class=K>IF</span>;
      csm_timeout <= csm_temp_timeout;
   <span class=K>END</span> <span class=K>PROCESS</span> csm_wait_combo_proc;

<span class=K>END</span> fsm;</pre>
<SCRIPT SRC="../../scripts/is.js"></SCRIPT><SCRIPT SRC="../../scripts/imageFrame.js"></SCRIPT>
</body>
