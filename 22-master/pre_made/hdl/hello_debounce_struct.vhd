-- VHDL Entity pre_made.HELLO_DEBOUNCE.symbol
--
-- Created:
--          by - kayra.UNKNOWN (HTC219-707-SPC)
--          at - 13:59:12 07/31/18
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;

ENTITY HELLO_DEBOUNCE IS
   PORT( 
      btn   : IN     std_logic_vector (3 DOWNTO 0);
      clk   : IN     std_logic;
      rst_n : IN     std_logic;
      led   : OUT    std_logic_vector (3 DOWNTO 0)
   );

-- Declarations

END HELLO_DEBOUNCE ;

--
-- VHDL Architecture pre_made.HELLO_DEBOUNCE.struct
--
-- Created:
--          by - mfhubu.UNKNOWN (HTC219-707-SPC)
--          at - 13:26:53  1.11.2019
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;
USE ieee.numeric_std.all;

LIBRARY Computer_Exercise_3_lib;
LIBRARY pre_made;

ARCHITECTURE struct OF HELLO_DEBOUNCE IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL bouncing_btn : std_logic;
   SIGNAL btn_dff      : std_logic;
   SIGNAL btn_dff_dff  : std_logic;
   SIGNAL btn_out      : std_logic;
   SIGNAL prand        : std_logic;


   -- ModuleWare signal declarations(v1.12) for instance 'U_4' of 'adff'
   SIGNAL mw_U_4reg_cval : std_logic;

   -- ModuleWare signal declarations(v1.12) for instance 'U_5' of 'adff'
   SIGNAL mw_U_5reg_cval : std_logic;

   -- Component Declarations
   COMPONENT Button_Filter
   PORT (
      btn_in       : IN     std_logic ;
      clk          : IN     std_logic ;
      rst          : IN     std_logic ;
      btn_filtered : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT bounce_counter
   PORT (
      clk     : IN     std_logic;
      deb_btn : IN     std_logic;
      rst_n   : IN     std_logic;
      led     : OUT    std_logic_vector (3 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT desync_gen
   PORT (
      btn_dff_dff : IN     std_logic;
      clk         : IN     std_logic;
      prand       : IN     std_logic;
      rst_n       : IN     std_logic;
      bouncing    : OUT    std_logic
   );
   END COMPONENT;
   COMPONENT prand_gen
   PORT (
      clk   : IN     std_logic ;
      rst_n : IN     std_logic ;
      prand : OUT    std_logic 
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : Button_Filter USE ENTITY Computer_Exercise_3_lib.Button_Filter;
   FOR ALL : bounce_counter USE ENTITY pre_made.bounce_counter;
   FOR ALL : desync_gen USE ENTITY pre_made.desync_gen;
   FOR ALL : prand_gen USE ENTITY pre_made.prand_gen;
   -- pragma synthesis_on


BEGIN

   -- ModuleWare code(v1.12) for instance 'U_4' of 'adff'
   btn_dff <= mw_U_4reg_cval;
   u_4seq_proc: PROCESS (clk, rst_n)
   BEGIN
      IF (rst_n = '0') THEN
         mw_U_4reg_cval <= '0';
      ELSIF (clk'EVENT AND clk='1') THEN
         mw_U_4reg_cval <= btn(0);
      END IF;
   END PROCESS u_4seq_proc;

   -- ModuleWare code(v1.12) for instance 'U_5' of 'adff'
   btn_dff_dff <= mw_U_5reg_cval;
   u_5seq_proc: PROCESS (clk, rst_n)
   BEGIN
      IF (rst_n = '0') THEN
         mw_U_5reg_cval <= '0';
      ELSIF (clk'EVENT AND clk='1') THEN
         mw_U_5reg_cval <= btn_dff;
      END IF;
   END PROCESS u_5seq_proc;

   -- Instance port mappings.
   U_0 : Button_Filter
      PORT MAP (
         btn_in       => bouncing_btn,
         clk          => clk,
         rst          => rst_n,
         btn_filtered => btn_out
      );
   U_1 : bounce_counter
      PORT MAP (
         clk     => clk,
         deb_btn => btn_out,
         rst_n   => rst_n,
         led     => led
      );
   U_3 : desync_gen
      PORT MAP (
         btn_dff_dff => btn_dff_dff,
         clk         => clk,
         prand       => prand,
         rst_n       => rst_n,
         bouncing    => bouncing_btn
      );
   U_2 : prand_gen
      PORT MAP (
         clk   => clk,
         rst_n => rst_n,
         prand => prand
      );

END struct;
