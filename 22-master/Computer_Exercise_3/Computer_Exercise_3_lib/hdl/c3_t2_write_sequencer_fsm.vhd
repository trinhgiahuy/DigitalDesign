-- VHDL Entity Computer_Exercise_3_lib.C3_T2_Write_Sequencer.symbol
--
-- Created:
--          by - mfhubu.UNKNOWN (HTC219-706-SPC)
--          at - 12:20:30 22.11.2019
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;

ENTITY C3_T2_Write_Sequencer IS
   PORT( 
      clk           : IN     std_logic;
      rst           : IN     std_logic;
      victory       : IN     std_logic;
      victory_done  : IN     std_logic;
      write_ready   : IN     std_logic;
      enable        : OUT    std_logic;
      enable_slow   : OUT    std_logic;
      frame_done    : OUT    std_logic;
      gun_px_ix     : OUT    std_logic_vector (1 DOWNTO 0);
      module_select : OUT    std_logic_vector (1 DOWNTO 0);
      write         : OUT    std_logic
   );

-- Declarations

END C3_T2_Write_Sequencer ;

--
-- VHDL Architecture Computer_Exercise_3_lib.C3_T2_Write_Sequencer.fsm
--
-- Created:
--          by - mfhubu.UNKNOWN (HTC219-706-SPC)
--          at - 12:20:30 22.11.2019
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;
 
ARCHITECTURE fsm OF C3_T2_Write_Sequencer IS

   -- Architecture Declarations
   SIGNAL counter : integer := 0;  

   TYPE STATE_TYPE IS (
      s0,
      s2,
      s3,
      s4,
      s5,
      s6,
      s7,
      s10,
      s11,
      s8,
      s9,
      s13,
      s12,
      s14
   );
 
   -- Declare current and next state signals
   SIGNAL current_state : STATE_TYPE;
   SIGNAL next_state : STATE_TYPE;
   -- pragma synthesis_off
   SIGNAL hds_next,hds_current,hds_clock: INTEGER;
   -- pragma synthesis_on

   -- Declare Wait State internal signals
   SIGNAL csm_timer : std_logic_vector(23 DOWNTO 0);
   SIGNAL csm_next_timer : std_logic_vector(23 DOWNTO 0);
   SIGNAL csm_timeout : std_logic;
   SIGNAL csm_to_s13 : std_logic;

BEGIN

   -----------------------------------------------------------------
   clocked_proc : PROCESS ( 
      clk,
      rst
   )
   -----------------------------------------------------------------
   BEGIN
      IF (rst = '0') THEN
         current_state <= s0;
         csm_timer <= (OTHERS => '0');
         -- pragma synthesis_off
         hds_current <= 0;
         -- pragma synthesis_on
      ELSIF (clk'EVENT AND clk = '1') THEN
         current_state <= next_state;
         csm_timer <= csm_next_timer;
         -- pragma synthesis_off
         hds_current <= hds_next;
         hds_clock <= -1;
         hds_clock <= 0;
         -- pragma synthesis_on

         -- Combined Actions
         CASE current_state IS
            WHEN s10 => 
               IF (counter /= 1) THEN 
                  counter <= 1 ;
               ELSIF (counter =1) THEN 
                  counter <= 0;
               END IF;
            WHEN OTHERS =>
               NULL;
         END CASE;
      END IF;
   END PROCESS clocked_proc;
 
   -----------------------------------------------------------------
   nextstate_proc : PROCESS ( 
      counter,
      csm_timeout,
      current_state,
      victory,
      victory_done,
      write_ready
   )
   -----------------------------------------------------------------
   BEGIN
      -- Default assignments to Wait State entry flags
      csm_to_s13 <= '0';
      CASE current_state IS
         WHEN s0 => 
            IF (write_ready = '1' AND victory = '1') THEN 
               next_state <= s14;
               -- pragma synthesis_off
               hds_next <= 1;
               -- pragma synthesis_on
            ELSIF (write_ready = '1' AND victory /= '1') THEN 
               next_state <= s2;
               -- pragma synthesis_off
               hds_next <= 2;
               -- pragma synthesis_on
            ELSE
               next_state <= s0;
               -- pragma synthesis_off
               hds_next <= 0;
               -- pragma synthesis_on
            END IF;
         WHEN s2 => 
            next_state <= s3;
            -- pragma synthesis_off
            hds_next <= 3;
            -- pragma synthesis_on
         WHEN s3 => 
            next_state <= s4;
            -- pragma synthesis_off
            hds_next <= 4;
            -- pragma synthesis_on
         WHEN s4 => 
            next_state <= s5;
            -- pragma synthesis_off
            hds_next <= 5;
            -- pragma synthesis_on
         WHEN s5 => 
            next_state <= s6;
            -- pragma synthesis_off
            hds_next <= 6;
            -- pragma synthesis_on
         WHEN s6 => 
            next_state <= s7;
            -- pragma synthesis_off
            hds_next <= 7;
            -- pragma synthesis_on
         WHEN s7 => 
            next_state <= s8;
            -- pragma synthesis_off
            hds_next <= 8;
            -- pragma synthesis_on
         WHEN s10 => 
            IF (counter /= 1) THEN 
               next_state <= s11;
               -- pragma synthesis_off
               hds_next <= 9;
               -- pragma synthesis_on
            ELSIF (counter =1) THEN 
               next_state <= s12;
               -- pragma synthesis_off
               hds_next <= 10;
               -- pragma synthesis_on
            ELSE
               next_state <= s10;
               -- pragma synthesis_off
               hds_next <= 0;
               -- pragma synthesis_on
            END IF;
         WHEN s11 => 
            next_state <= s13;
            csm_to_s13 <= '1';
            -- pragma synthesis_off
            hds_next <= 11;
            -- pragma synthesis_on
         WHEN s8 => 
            next_state <= s9;
            -- pragma synthesis_off
            hds_next <= 12;
            -- pragma synthesis_on
         WHEN s9 => 
            next_state <= s10;
            -- pragma synthesis_off
            hds_next <= 13;
            -- pragma synthesis_on
         WHEN s13 => 
            IF (csm_timeout = '1') THEN 
               next_state <= s0;
               -- pragma synthesis_off
               hds_next <= 14;
               -- pragma synthesis_on
            ELSE
               next_state <= s13;
               -- pragma synthesis_off
               hds_next <= 0;
               -- pragma synthesis_on
            END IF;
         WHEN s12 => 
            next_state <= s13;
            csm_to_s13 <= '1';
            -- pragma synthesis_off
            hds_next <= 15;
            -- pragma synthesis_on
         WHEN s14 => 
            IF (victory_done = '1') THEN 
               next_state <= s10;
               -- pragma synthesis_off
               hds_next <= 16;
               -- pragma synthesis_on
            ELSE
               next_state <= s14;
               -- pragma synthesis_off
               hds_next <= 0;
               -- pragma synthesis_on
            END IF;
         WHEN OTHERS =>
            next_state <= s0;
            -- pragma synthesis_off
            hds_next <= 0;
            -- pragma synthesis_on
      END CASE;
   END PROCESS nextstate_proc;
 
   -----------------------------------------------------------------
   output_proc : PROCESS ( 
      current_state
   )
   -----------------------------------------------------------------
   BEGIN
      -- Default Assignment
      enable <= '0';
      enable_slow <= '0';
      frame_done <= '0';
      gun_px_ix <= "00";
      module_select <= "00";
      write <= '0';

      -- Combined Actions
      CASE current_state IS
         WHEN s2 => 
            write <= '1';
         WHEN s3 => 
            write <= '1';
            module_select <= "01";
         WHEN s4 => 
            module_select <= "01";
            write <= '1' ;
         WHEN s5 => 
            module_select <= "01";
            write <= '1' ;
            gun_px_ix <= "01";
         WHEN s6 => 
            module_select <= "01";
            write <= '1' ;
            gun_px_ix <= "10";
         WHEN s7 => 
            module_select <= "01";
            write <= '1' ;
            gun_px_ix <= "11";
         WHEN s10 => 
            frame_done <= '1' ;
         WHEN s11 => 
            enable <= '1';
         WHEN s8 => 
            module_select <= "01";
            write <= '1' ;
            gun_px_ix <= "11";
         WHEN s9 => 
            write <= '1' ;
            module_select <= "10" ;
         WHEN s12 => 
            enable <= '1' ;
            enable_slow <= '1' ;
         WHEN s14 => 
            write <= '1';
            module_select <= "11" ;
         WHEN OTHERS =>
            NULL;
      END CASE;
   END PROCESS output_proc;
 
   -----------------------------------------------------------------
   csm_wait_combo_proc: PROCESS (
      csm_timer,
      csm_to_s13
   )
   -----------------------------------------------------------------
   VARIABLE csm_temp_timeout : std_logic;
   BEGIN
      IF (unsigned(csm_timer) = 0) THEN
         csm_temp_timeout := '1';
      ELSE
         csm_temp_timeout := '0';
      END IF;

      IF (csm_to_s13 = '1') THEN
         csm_next_timer <= "101101110001101011111111"; -- no cycles(12000000)-1=11999999
      ELSE
         IF (csm_temp_timeout = '1') THEN
            csm_next_timer <= (OTHERS=>'0');
         ELSE
            csm_next_timer <= unsigned(csm_timer) - '1';
         END IF;
      END IF;
      csm_timeout <= csm_temp_timeout;
   END PROCESS csm_wait_combo_proc;

END fsm;
