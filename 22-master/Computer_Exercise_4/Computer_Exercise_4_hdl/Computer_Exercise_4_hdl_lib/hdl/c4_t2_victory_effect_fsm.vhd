-- VHDL Entity Computer_Exercise_4_hdl_lib.C4_T2_Victory_Effect.symbol
--
-- Created:
--          by - mfhubu.UNKNOWN (HTC219-706-SPC)
--          at - 12:21:14 22.11.2019
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;

ENTITY C4_T2_Victory_Effect IS
   PORT( 
      clk          : IN     std_logic;
      rst          : IN     std_logic;
      color        : OUT    std_logic_vector (23 DOWNTO 0);
      victory_done : OUT    std_logic;
      x            : OUT    std_logic_vector (7 DOWNTO 0);
      y            : OUT    std_logic_vector (7 DOWNTO 0)
   );

-- Declarations

END C4_T2_Victory_Effect ;

--
-- VHDL Architecture Computer_Exercise_4_hdl_lib.C4_T2_Victory_Effect.fsm
--
-- Created:
--          by - mfhubu.UNKNOWN (HTC219-709-SPC)
--          at - 13:42:20 20.01.2020
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;
 
ARCHITECTURE fsm OF C4_T2_Victory_Effect IS

   TYPE STATE_TYPE IS (
      s0,
      s1,
      s2,
      s3,
      s5,
      s6,
      s7,
      s8,
      s9,
      s10,
      s11,
      s12,
      s4,
      s13
   );
 
   -- Declare current and next state signals
   SIGNAL current_state : STATE_TYPE;
   SIGNAL next_state : STATE_TYPE;

BEGIN

   -----------------------------------------------------------------
   clocked_proc : PROCESS ( 
      clk,
      rst
   )
   -----------------------------------------------------------------
   BEGIN
      IF (rst = '0') THEN
         current_state <= s0;
      ELSIF (clk'EVENT AND clk = '1') THEN
         current_state <= next_state;
      END IF;
   END PROCESS clocked_proc;
 
   -----------------------------------------------------------------
   nextstate_proc : PROCESS ( 
      current_state
   )
   -----------------------------------------------------------------
   BEGIN
      CASE current_state IS
         WHEN s0 => 
            next_state <= s1;
         WHEN s1 => 
            next_state <= s2;
         WHEN s2 => 
            next_state <= s13;
         WHEN s3 => 
            next_state <= s5;
         WHEN s5 => 
            next_state <= s6;
         WHEN s6 => 
            next_state <= s4;
         WHEN s7 => 
            next_state <= s8;
         WHEN s8 => 
            next_state <= s9;
         WHEN s9 => 
            next_state <= s10;
         WHEN s10 => 
            next_state <= s11;
         WHEN s11 => 
            next_state <= s12;
         WHEN s12 => 
            next_state <= s0;
         WHEN s4 => 
            next_state <= s7;
         WHEN s13 => 
            next_state <= s3;
         WHEN OTHERS =>
            next_state <= s0;
      END CASE;
   END PROCESS nextstate_proc;
 
   -----------------------------------------------------------------
   output_proc : PROCESS ( 
      current_state
   )
   -----------------------------------------------------------------
   BEGIN
      -- Default Assignment
      color <= "000000111110110011111100";
      victory_done <= '0';
      x <= "01000000";
      y <= "00100000";

      -- Combined Actions
      CASE current_state IS
         WHEN s1 => 
            x <= "01000000";
            y <= "00100000";
         WHEN s2 => 
            x <= "00100000";
            y <= "01000000";
         WHEN s3 => 
            x <= "00010000";
            y <= "01000000";
         WHEN s5 => 
            x <= "00001000";
            y <= "01000000";
         WHEN s6 => 
            x <= "00000100";
            y <= "01000000";
         WHEN s7 => 
            x <= "00000010";
            y <= "00100000";
         WHEN s8 => 
            x <= "00100000";
            y <= "00000010";
         WHEN s9 => 
            x <= "00100000";
            y <= "00000100";
         WHEN s10 => 
            x <= "00000100";
            y <= "00000010";
         WHEN s11 => 
            x <= "00000100";
            y <= "00000100";
         WHEN s12 => 
            victory_done <= '1' ;
         WHEN s4 => 
            x <= "00000100";
            y <= "01000000";
         WHEN s13 => 
            x <= "00100000";
            y <= "01000000";
         WHEN OTHERS =>
            NULL;
      END CASE;
   END PROCESS output_proc;
 
END fsm;
